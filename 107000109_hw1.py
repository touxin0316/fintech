# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DLHcf5SZuOW241fQMDOOenBnlv0eH_2n
"""

import numpy as np
import pandas as pd
import csv

data_0 = pd.read_csv('Daily_2021_09_16.csv', encoding= 'unicode_escape')
data_16 = pd.DataFrame()
for index in range(len(data_0)):
  print(index)
  if data_0.iloc[index][1].strip() == "TX".strip() :
    if data_0.iloc[index][2].strip() == "202110".strip() :
      #print(data.iloc[index])
      data_16 = data_16.append(data_0.iloc[index])[data_0.columns.tolist()]

data_17 = pd.DataFrame()
data_1 = pd.read_csv('Daily_2021_09_17.csv', encoding= 'unicode_escape')
for index in range(len(data_1)):
  print(index)
  if str(data_1.iloc[index][1]).strip() == "TX" :
    #print("yes")
    if str(data_1.iloc[index][2]).strip() == "202110" :
      #print(data.iloc[index])
      data_17 = data_17.append(data_1.iloc[index])[data_1.columns.tolist()]

data_22 = pd.DataFrame()
data_2 = pd.read_csv('Daily_2021_09_22.csv', encoding= 'unicode_escape')
for index in range(len(data_2)):
  print(index)
  if str(data_2.iloc[index][1]).strip() == "TX" :
    if str(data_2.iloc[index][2]).strip() == "202110" :
      data_22 = data_22.append(data_2.iloc[index])[data_2.columns.tolist()]

data_23 = pd.DataFrame()
data_3 = pd.read_csv('Daily_2021_09_23.csv', encoding= 'unicode_escape')
for index in range(len(data_3)):
  print(index)
  if str(data_3.iloc[index][1]).strip() == "TX" :
    if str(data_3.iloc[index][2]).strip() == "202110" :
      data_23 = data_23.append(data_3.iloc[index])[data_3.columns.tolist()]

data_24 = pd.DataFrame()
data_4 = pd.read_csv('Daily_2021_09_24.csv', encoding= 'unicode_escape')
for index in range(len(data_4)):
  print(index)
  if str(data_4.iloc[index][1]).strip() == "TX" :
    if str(data_4.iloc[index][2]).strip() == "202110" :
      data_24 = data_24.append(data_4.iloc[index])[data_4.columns.tolist()]

data_27 = pd.DataFrame()
data_5 = pd.read_csv('Daily_2021_09_27.csv', encoding= 'unicode_escape')
for index in range(len(data_5)):
  print(index)
  if str(data_5.iloc[index][1]).strip() == "TX" :
    if str(data_5.iloc[index][2]).strip() == "202110" :
      data_27 = data_27.append(data_5.iloc[index])[data_5.columns.tolist()]

data_28 = pd.DataFrame()
data_6 = pd.read_csv('Daily_2021_09_28.csv', encoding= 'unicode_escape')
for index in range(len(data_6)):
  print(index)
  if str(data_6.iloc[index][1]).strip() == "TX" :
    if str(data_6.iloc[index][2]).strip() == "202110" :
      data_28 = data_28.append(data_6.iloc[index])[data_6.columns.tolist()]

data_29 = pd.DataFrame()
data_7 = pd.read_csv('Daily_2021_09_29.csv', encoding= 'unicode_escape')
for index in range(len(data_7)):
  print(index)
  if str(data_7.iloc[index][1]).strip() == "TX" :
    if str(data_7.iloc[index][2]).strip() == "202110" :
      data_29 = data_29.append(data_7.iloc[index])[data_7.columns.tolist()]

data_30 = pd.DataFrame()
data_8 = pd.read_csv('Daily_2021_09_30.csv', encoding= 'unicode_escape')
for index in range(len(data_8)):
  print(index)
  if str(data_8.iloc[index][1]).strip() == "TX" :
    if str(data_8.iloc[index][2]).strip() == "202110" :
      data_30 = data_30.append(data_8.iloc[index])[data_8.columns.tolist()]

data_01 = pd.DataFrame()
data_9 = pd.read_csv('Daily_2021_10_01.csv', encoding= 'unicode_escape')
for index in range(len(data_9)):
  print(index)
  if str(data_9.iloc[index][1]).strip() == "TX" :
    if str(data_9.iloc[index][2]).strip() == "202110" :
      data_01 = data_01.append(data_9.iloc[index])[data_9.columns.tolist()]

data_04 = pd.DataFrame()
data_10 = pd.read_csv('Daily_2021_10_04.csv', encoding= 'unicode_escape')
for index in range(len(data_10)):
  print(index)
  if str(data_10.iloc[index][1]).strip() == "TX" :
    if str(data_10.iloc[index][2]).strip() == "202110" :
      data_04 = data_04.append(data_10.iloc[index])[data_10.columns.tolist()]

res = pd.concat([res, data_04],axis=0, ignore_index=True)
res.shape[0]

res.to_csv('TX.csv', header=False, index = False)

data_16.to_csv('Data_16.csv', header=False, index = False)
data_17.to_csv('Data_17.csv', header=False, index = False)
data_22.to_csv('Data_22.csv', header=False, index = False)
data_23.to_csv('Data_23.csv', header=False, index = False)
data_24.to_csv('Data_24.csv', header=False, index = False)
data_27.to_csv('Data_27.csv', header=False, index = False)
data_28.to_csv('Data_28.csv', header=False, index = False)
data_29.to_csv('Data_29.csv', header=False, index = False)
data_30.to_csv('Data_30.csv', header=False, index = False)
data_01.to_csv('Data_01.csv', header=False, index = False)
data_04.to_csv('Data_04.csv', header=False, index = False)

import pandas as pd
res = pd.read_csv('TX.csv', header=None)
res.columns = ['date','type','expire','time','price','volume','n_1','n_2','n_3']
res.head()

tmp_1 = pd.DataFrame()
tmp_1 = res
tmp_1['date'] = tmp_1['date'].astype(int)
print(type(tmp_1['date'][0]))
tmp_1 = tmp_1.set_index('date')
a = []
a.append(sum(tmp_1['price'].loc['20210915'].astype(int) * tmp_1['volumn'].loc['20210915'].astype(int)) / sum(tmp_1['volumn'].loc['20210915'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210916'].astype(int) * tmp_1['volumn'].loc['20210916'].astype(int)) / sum(tmp_1['volumn'].loc['20210916'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210917'].astype(int) * tmp_1['volumn'].loc['20210917'].astype(int)) / sum(tmp_1['volumn'].loc['20210917'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210918'].astype(int) * tmp_1['volumn'].loc['20210918'].astype(int)) / sum(tmp_1['volumn'].loc['20210918'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210922'].astype(int) * tmp_1['volumn'].loc['20210922'].astype(int)) / sum(tmp_1['volumn'].loc['20210922'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210923'].astype(int) * tmp_1['volumn'].loc['20210923'].astype(int)) / sum(tmp_1['volumn'].loc['20210923'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210924'].astype(int) * tmp_1['volumn'].loc['20210924'].astype(int)) / sum(tmp_1['volumn'].loc['20210924'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210927'].astype(int) * tmp_1['volumn'].loc['20210927'].astype(int)) / sum(tmp_1['volumn'].loc['20210927'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210928'].astype(int) * tmp_1['volumn'].loc['20210928'].astype(int)) / sum(tmp_1['volumn'].loc['20210928'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210929'].astype(int) * tmp_1['volumn'].loc['20210929'].astype(int)) / sum(tmp_1['volumn'].loc['20210929'].astype(int)))
a.append(sum(tmp_1['price'].loc['20210930'].astype(int) * tmp_1['volumn'].loc['20210930'].astype(int)) / sum(tmp_1['volumn'].loc['20210930'].astype(int)))
a.append(sum(tmp_1['price'].loc['20211001'].astype(int) * tmp_1['volumn'].loc['20211001'].astype(int)) / sum(tmp_1['volumn'].loc['20211001'].astype(int)))
a.append(sum(tmp_1['price'].loc['20211002'].astype(int) * tmp_1['volumn'].loc['20211002'].astype(int)) / sum(tmp_1['volumn'].loc['20211002'].astype(int)))
a.append(sum(tmp_1['price'].loc['20211004'].astype(int) * tmp_1['volumn'].loc['20211004'].astype(int)) / sum(tmp_1['volumn'].loc['20211004'].astype(int)))
print(a)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime
#res['date'] = pd.to_datetime(res['date'], format='%Y%m%d')
#x_values = [datetime.datetime.strptime(d,"%Y%m%d").date() for d in res['date'].astype(int).astype(str)]
x_values = ['20210915','20210916','20210917','20210918','20210922','20210923','20210924','20210927','20210928','20210929','20210930','20211001','20211002','20211004']
plt.xticks(rotation=90)
plt.plot(x_values, a,)

sum(res['price'].iloc[0:10000].astype(int) * res['volumn'].iloc[0:10000].astype(int)) / sum(res['volumn'].iloc[0:10000].astype(int))

# tick bars

total_ticks = len(res)

num_of_ticks = 10000

num_of_bars = total_ticks / num_of_ticks
print(int(num_of_bars))

tmp = []
num_of_bars = int(num_of_bars)
for i in range(0, num_of_bars) :
  if i*10000 < total_ticks : 
    tmp.append(sum(res['price'].iloc[i*10000 : i*10000+10000].astype(int) * res['volume'].iloc[i*10000 : i*10000+10000].astype(int)) / sum(res['volume'].iloc[i*10000 : i*10000+10000].astype(int))) 
  else :
    tmp.append(sum(res['price'].iloc[i*10000:total_ticks]).astype(int) * res['volume'].iloc[i*10000 : total_ticks].astype(int)) / sum(res['volume'].iloc[i*10000 : total_ticks].astype(int)) 
print(tmp)

#x_values = [datetime.datetime.strptime(d,"%Y%m%d").date() for d in res['date'].astype(int).astype(str)]
x_values = []
for i in range(0, num_of_bars):
  x_values.append(res['date'].iloc[i * 10000].astype(str)+res['time'].iloc[i * 10000].astype(str))
print(x_values)
plt.xticks(rotation=90)
plt.plot(x_values, tmp)

total_volume = res['volume'].sum()
print(total_volume)

# volume bars

total_volume = res['volume'].sum()

volume_of_bars = 100000

num_of_vol_bars = total_volume / volume_of_bars


tmp_vol = []
x_values = []
sum = 0

num_of_vol_bars = int(num_of_vol_bars)
j = 0
for i in range(0, len(res)) :
  if sum >= volume_of_bars : 
    sum = 0
    tmp_vol.append((res['price'].iloc[j : i].astype(int) * res['volume'].iloc[j : i].astype(int)).sum() / volume_of_bars)
    x_values.append(res['date'].iloc[i].astype(str)+res['time'].iloc[i].astype(str)) 
    j = i
  else :
    sum += res['volume'].iloc[i] 
    #tmp.append(sum(res['price'].iloc[i*10000:total_ticks]).astype(int) * res['volume'].iloc[i*10000 : total_ticks].astype(int)) / sum(res['volume'].iloc[i*10000 : total_ticks].astype(int)) 

plt.xticks(rotation=90)
plt.plot(x_values, tmp_vol)

# dollar bars


dollar_of_bars = 1000000000



tmp_dol = []
x_values = []
sum = 0

j = 0
for i in range(0, len(res)) :
  if sum >= dollar_of_bars : 
    sum = 0
    tmp_dol.append((res['price'].iloc[j : i].astype(int) * res['volume'].iloc[j : i].astype(int)).sum() / res['volume'].iloc[j : i].astype(int).sum())
    x_values.append(res['date'].iloc[i].astype(str)+res['time'].iloc[i].astype(str)) 
    j = i
  else :
    sum += res['volume'].iloc[i] * res['price'].iloc[i]
    #tmp.append(sum(res['price'].iloc[i*10000:total_ticks]).astype(int) * res['volume'].iloc[i*10000 : total_ticks].astype(int)) / sum(res['volume'].iloc[i*10000 : total_ticks].astype(int)) 

plt.xticks(rotation=90)
plt.plot(x_values, tmp_dol)